name: PR - Check

on: workflow_dispatch

env:
  FILE_PLAN: ${{ github.event.number }}.plan
  BUCKET_TF: pcio-${{ github.ref_name }}-${{ secrets.AWS_ACCOUNT_ID }}-terraform

permissions:
  id-token: write
  contents: read

jobs:
  checks:
    runs-on: ubuntu-24.04

    environment:
      name: ${{ github.ref_name }}

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          role-to-assume: ${{ secrets.ROLE_TO_ASSUME }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ vars.TF_VERSION }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ vars.BUN_VERSION }}

      - name: Install Cypress Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install                                              \
            libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libnss3 libxss1 \
            libasound2t64 libxtst6 xauth xvfb

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Global Dependencies
        run: bun install

      - name: Start Docker Containers
        run: |
          echo "API_PORT=${{ secrets.API_PORT }}" >> .env
          echo "UI_PORT=${{ secrets.UI_PORT }}" >> .env
          docker compose up -d

      - name: Cache Dependencies (global)
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('bun.lock') }}

      - name: Cache Dependencies (API)
        uses: actions/cache@v3
        with:
          path: api/node_modules
          key: node-modules-${{ hashFiles('api/bun.lock') }}

      - name: Cache Dependencies (UI)
        uses: actions/cache@v3
        with:
          path: ui/node_modules
          key: node-modules-${{ hashFiles('ui/bun.lock') }}

      - name: Lint (API)
        run: cd api && docker compose exec api bun run lint && cd ..

      - name: Lint (UI)
        run: cd ui && docker compose exec ui bun run lint && cd ..

      - name: Run Code Tests (API)
        run: docker compose exec api bun test

      - name: Run Code Tests (UI)
        run: docker compose exec ui bun test

      - name: Spin Up Services
        run: |
          nohup docker compose exec api bun dev & echo $! > api.pid
          nohup docker compose exec ui bun dev & echo $! > ui.pid

      - name: Wait for Service (API)
        run: npx wait-on http-get://localhost:${{ secrets.API_PORT }}/api

      - name: Wait for Service (UI)
        run: npx wait-on http-get://localhost:${{ secrets.UI_PORT }}

      - name: Run E2E Tests
        run: bun run e2e:ci

      - name: Spin Down Services
        run: |
          kill $(cat api.pid)
          kill $(cat ui.pid)

      - name: Initialize
        run: |
          terraform init                                    \
            -backend-config="region=${{ vars.AWS_REGION }}" \
            -backend-config="bucket=${{ env.BUCKET_TF }}"   \
            -backend-config="key=state/terraform.tfstate"   \
            -var env="${{ github.ref_name }}"

      - name: Format
        run: terraform fmt -check

      - name: Validate
        run: terraform validate

      - name: Plan
        run: terraform plan -out="${{ env.FILE_PLAN }}"

      - name: Upload Plan to S3
        run: aws s3 cp                                          \
          ${{ env.FILE_PLAN }}                                  \
          s3://${{ env.BUCKET_TF }}/plans/${{ env.FILE_PLAN }}
